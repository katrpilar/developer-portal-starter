{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0",
    "title": "Setster Scheduling API",
    "contact": {"email": "info@setster.com", "name": ""},
    "description": "The Setster API is used to control your account’s data programmatically. The API is organized around REST  and standard HTTP verbs. A consistent envelope is used for all responses alongside response codes to indicate the status of the message and any error codes. JSON is returned on all our API responses with a consistent structure for all messages.\n\nIn order to use the Setster API you will need the API key that you can find within your Setster account and note you should never expose your  API key in any public website's client-side code. The Setster API works on HTTPS only.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->"
  },
  "servers": [
    {
      "url": "https://www.setster.com/api/v2"
    }
  ],
  "tags": [
    {
      "name": "Account",
      "description": ""
    },
    {
      "name": "Appointment",
      "description": ""
    },
    {
      "name": "Availability",
      "description": ""
    },
    {
      "name": "Client",
      "description": ""
    },
    {
      "name": "Custom Field",
      "description": ""
    },
    {
      "name": "Employee",
      "description": ""
    },
    {
      "name": "Location",
      "description": ""
    },
    {
      "name": "Service",
      "description": ""
    },
    {
      "name": "Time Zone",
      "description": ""
    },
    {
      "name": "WebHooks",
      "description": ""
    },
    {
      "name": "Steps",
      "description": "",
      "externalDocs": {
        "description": "testing external docs",
        "url": "https://www.setster.com/api/docs"}     
    }
  ],
  "x-tagGroups": [
    {
      "name": "API",
      "tags": [
        "Account",
        "Appointment",
        "Availability",
        "Client",
        "Custom Field",
        "Employee",
        "Location",
        "Service",
        "Time Zone",
        "WebHooks"
      ]
    },
    {
      "name": "Widget",
      "tags": [
        "Steps"
      ]
    }
  ],
  "paths": {
    "/account/authenticate": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Authenticate",
        "operationId": "AccountAuthenticate",
        "description": "The first step to using the Setster API is to authenticate to an account. Authenticate your account by including your key and email in an API request. In the returned response, the session_token should be used for all future API calls. Please note the session_token expires within 24 hours at which you need to re-authenticate and retrieve another session_token to keep the connection open.",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "description": "Account owner email address",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "in": "query",
            "name": "password",
            "description": "Account owner password",
            "schema": {
              "type": "string",
              "format": "password"
            }
          },
          {
            "in": "query",
            "name": "token",
            "description": "API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "example": 2343
                                },
                                "company_id": {
                                  "type": "integer",
                                  "example": 2423
                                },
                                "account_type": {
                                  "type": "integer",
                                  "example": 4
                                },
                                "enable_locations": {
                                  "type": "boolean"
                                },
                                "intuit_user_id": {
                                  "type": "integer",
                                  "example": null
                                },
                                "nick_name": {
                                  "type": "string",
                                  "example": "demo-api"
                                },
                                "is_owner": {
                                  "type": "boolean"
                                },
                                "enabled": {
                                  "type": "boolean"
                                }
                              }
                            },
                            "session_token": {
                              "type": "string",
                              "example": "bl0l9e0g9t1lvul5fg635jre32"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Account is not active or Incorrect API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "example": 3
                    },
                    "statusDescriptions": {
                      "type": "string",
                      "example": "Account is not active"
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account info",
        "description": "Retrieves account details",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "company_id",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create new account/sub-account",
        "description": "Creates an account or child account",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/companies": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "List sub-accounts",
        "description": "Retrieves child accounts of parent account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "company_id": {
                                "type": "integer",
                                "example": "655"
                              },
                              "company_name": {
                                "type": "string",
                                "example": "Apple Company"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/saveBussinessInfo": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Save business info",
        "description": "Edits business details for an account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AccountBusinessInfo"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AccountBusinessInfo"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/getAccountInfo": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account info",
        "description": "Retrieves account details.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "company_id",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/Account"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "holidays": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "business_hours": {
                                  "type": "string"
                                },
                                "company_business_hours": {
                                  "type": "string"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/saveOptions": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Save options",
        "description": "Edits account booking options.",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AccountOptions"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AccountOptions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AccountOptions"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/getOptions": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get options",
        "description": "Retrieves account booking options.",
        "parameters": [
          {
            "name": "company_id",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          }
        ],
        "security": [
          {
            "session_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AccountOptions"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/savePersonalInfo": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Save personal info",
        "description": "Edits personal details.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AccountPersonalInfo"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AccountPersonalInfo"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/getPersonalInfo": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get personal info",
        "description": "Retrieves personal details.",
        "security": [
          {
            "session_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "format": "email"
                              },
                              "phone": {
                                "type": "string",
                                "example": "07563463575"
                              },
                              "first_name": {
                                "type": "string",
                                "example": "John"
                              },
                              "last_name": {
                                "type": "string",
                                "example": "Doe"
                              },
                              "permissions": {
                                "type": "string",
                                "example": "availability,appointments,get_widget,promote"
                              },
                              "authority": {
                                "type": "string",
                                "example": "ROLE_NORMA"
                              },
                              "is_owner": {
                                "type": "boolean",
                                "example": 0
                              },
                              "status": {
                                "type": "integer",
                                "example": 0
                              },
                              "currency": {
                                "type": "string",
                                "example": "USD"
                              },
                              "can_login": {
                                "type": "boolean",
                                "example": 1
                              },
                              "used_licenses": {
                                "type": "integer",
                                "example": 5
                              },
                              "locations": {
                                "type": "integer",
                                "example": 3
                              },
                              "employees": {
                                "type": "integer",
                                "example": 5
                              },
                              "company_id": {
                                "type": "integer",
                                "example": 423
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/uploadLogo": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Upload logo",
        "description": "Adds or edits account logo.",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "logo": {
                    "type": "file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "upload_id": {
                              "type": "integer"
                            },
                            "file_name": {
                              "type": "string"
                            },
                            "file_location": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/uploadSplash": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Upload splash",
        "description": "Adds or edits splash image.",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "splash": {
                    "type": "file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "upload_id": {
                              "type": "integer"
                            },
                            "file_name": {
                              "type": "string"
                            },
                            "file_location": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/registerPayment": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Register payment",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "period": {
                        "type": "string"
                      },
                      "ccType": {
                        "type": "string"
                      },
                      "ccNo": {
                        "type": "string"
                      },
                      "ccName": {
                        "type": "string"
                      },
                      "ccMonth": {
                        "type": "string"
                      },
                      "ccYear": {
                        "type": "string"
                      },
                      "ccCVV2": {
                        "type": "string"
                      },
                      "additional_services": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "service1"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "result": {
                              "type": "boolean"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/registerCustomerPayment": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Register customer payment",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "service_payment_gateway": {
                        "type": "string"
                      },
                      "paypal_email": {
                        "type": "string"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "stripe_authorization_code": {
                        "type": "string"
                      },
                      "stripe_access_token": {
                        "type": "string"
                      },
                      "analytics_account_id": {
                        "type": "string"
                      },
                      "invoice_service_type": {
                        "type": "string"
                      },
                      "fb_api_url": {
                        "type": "string"
                      },
                      "fb_api_token": {
                        "type": "string"
                      },
                      "capture_leads": {
                        "type": "string"
                      },
                      "cl_oid": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "result": {
                              "type": "boolean"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/getAccountData": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account data",
        "description": "Retrieve account info.",
        "security": [
          {
            "session_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "service_payment_gateway": {
                              "type": "integer"
                            },
                            "paypal_email": {
                              "type": "string",
                              "format": "email"
                            },
                            "currency": {
                              "type": "string"
                            },
                            "api_token": {
                              "type": "string"
                            },
                            "analytics_account_id": {
                              "type": "integer"
                            },
                            "invoice_service_type": {
                              "type": "integer"
                            },
                            "capture_leads": {
                              "type": "boolean"
                            },
                            "fb_api_url": {
                              "type": "string"
                            },
                            "fb_api_token": {
                              "type": "string"
                            },
                            "cl_oid": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/getStripe": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Stripe",
        "security": [
          {
            "session_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "stripePublishableKey": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/getPaypal": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get PayPal email",
        "security": [
          {
            "session_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "paypal_email": {
                              "type": "string",
                              "format": "email"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/getWidgetCode": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get widget code",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "company_id",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "overlay_option",
            "schema": {
              "type": "string",
              "default": "overlay"
            },
            "in": "query"
          },
          {
            "name": "position",
            "schema": {
              "type": "string",
              "default": "right"
            },
            "in": "query"
          },
          {
            "name": "button_name",
            "schema": {
              "type": "string",
              "default": "Appointment"
            },
            "in": "query"
          },
          {
            "name": "button_color",
            "schema": {
              "type": "string",
              "default": "ff0000"
            },
            "in": "query"
          },
          {
            "name": "defaultService",
            "schema": {
              "type": "string"
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "name": "defaultProvider",
            "schema": {
              "type": "string"
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "name": "defaultLocation",
            "schema": {
              "type": "string"
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "name": "returnUrl",
            "schema": {
              "format": "url",
              "type": "string"
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "name": "locations_map",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0,
            "in": "query"
          },
          {
            "name": "no_code",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0,
            "in": "query"
          },
          {
            "name": "send_to",
            "schema": {
              "type": "string",
              "format": "email"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "html": {
                              "type": "string",
                              "format": "html",
                              "example": "<!-- Begin Setster Widget -->\\n<script type=\\\"text/javascript\\\"\ncharset=\\\"utf-8\\\">\\n  var is_ssl = (\\\"https:\\\" == document.location.protocol);\\n\n  var setsHost = is_ssl ? \\\"https://www.setster.com/widget/\\\" :\n  \\\"https://www.setster.com/widget/\\\";\\n  document.write(unescape(\\\"%3Cscript\n  src='\\\" + setsHost + \\\"js/setster_over.js?v=2'\n  type='text/javascript'%3E%3C/script%3E\\\"));\\n</script>\\n\\n\n  <script type=\\\"text/javascript\\\" charset=\\\"utf-8\\\">\\n\n  var setster_widget_options = {};\\n\\n  setster_widget_options.display =\n  \\\"overlay\\\";  \\n  setster_widget_options.uri = \\\"boxadoro\\\";\\n\n  setster_widget_options.placement = \\\"right\\\";  \\n\n  setster_widget_options.buttonName = \\\"Appointment\\\";  \\n\n  setster_widget_options.setsterURL = setsHost; \\n   var setster_widget =\n  new Setster.setster_widget(setster_widget_options);\\n</script>\\n\n  <!-- End Setster Widget -->\\n\"\n"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/account/request_password_reset": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Request password reset",
        "description": "Initiates a password reset process. In order to reset the password a pre request must be made.",
        "parameters": [
          {
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email"
            },
            "example": "email@company.com",
            "required": true,
            "in": "query"
          },
          {
            "name": "confirmation_url",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "required": true,
            "in": "query",
            "example": "www.test_confirmation_url.com",
            "description": "The base url used to generate the confirmation link in the email message that is sent to the client. Confirmation link = confirmation_url + '?email={userEmail}&hash_code={hashCode}'"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status of the operation",
                      "example": 0
                    },
                    "statusDescriptions": {
                      "type": "string",
                      "example": "Confirmation email sent",
                      "description": "Description of the status"
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/logout": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Logout",
        "security": [
          {
            "session_token": []
          }
        ],
        "responses": {
          "301": {
            "description": "Logout successful"
          }
        }
      }
    },
    "/account/reset_password": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Change account credentials",
        "description": "Modifies the account password using the valid hash_code that was used when initiating the password reset process.",
        "parameters": [
          {
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email"
            },
            "required": true,
            "in": "query",
            "example": "email@company.com"
          },
          {
            "name": "hash_code",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "query",
            "example": "test_hash_code"
          },
          {
            "name": "new_password",
            "schema": {
              "type": "string",
              "format": "password"
            },
            "required": true,
            "in": "query",
            "example": "test_new_password"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status of the operation",
                      "example": 0
                    },
                    "statusDescriptions": {
                      "type": "string",
                      "example": "Password changed",
                      "description": "Description of the status"
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/checknickname/{nickname}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check nickname availability",
        "description": "Check nickname availability",
        "parameters": [
          {
            "name": "nickname",
            "in": "path",
            "required": true,
            "example": "johndoe",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status of the operation",
                      "example": 0
                    },
                    "statusDescriptions": {
                      "type": "string",
                      "example": "nick_name already exists",
                      "description": "Description of the status"
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/checkemail/{email}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check email availability",
        "description": "Check email availability",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "example": "test@example.com",
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status of the operation",
                      "example": 0
                    },
                    "statusDescriptions": {
                      "type": "string",
                      "example": "nick_name already exists",
                      "description": "Description of the status"
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/location": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "List locations",
        "description": "Using this endpoint you can retrieve the attributes of all your locations",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Location ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Company id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "street1",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "street2",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zip",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "website",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lat",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lng",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paypal_email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timezone_id",
            "in": "query",
            "description": "The timezone id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "virtual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tmp_default",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "has_links",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_links",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Location"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create location",
        "description": "Using this endpoint you can create a new location within the account",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Location"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/location/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get a location",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Location id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Location"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Modify location",
        "description": "Using this endpoint you can change the attributes of a location within the account",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Location id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Location"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Delete a location",
        "description": "Using this endpoint you can delete a location within the account",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Location id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/location/assignServices": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Assign all services and employees to a location",
        "description": "Using this endpoint you can assign services and employees to a location",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "query",
            "description": "Location id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "example": {
                      "45634": [
                        232,
                        34534
                      ]
                    },
                    "description": "The following format is used:\n`{ PROVIDER_ID: [ SERVICE_1, SERVICE_2, ...]}`\nTo assign services to all providers at a location use:\n`{0: [SERVICE_1, SERVICE_2, ...]}`\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "example": null
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/location/uploadPhoto": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Upload location photo",
        "description": "Using this endpoint you can add/update the location photo",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "Location id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/png, image/jpeg"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/UploadedFile"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/location/removePhoto": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Remove location photo",
        "description": "Using this endpoint you can remove the location photo",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "Location id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "required": [
                      "file_name"
                    ],
                    "properties": {
                      "file_name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "example": null
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/location/updateOrder": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Update order number",
        "description": "Change the order in the list of locations",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "ord"
                      ],
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 27864,
                          "description": "Location id"
                        },
                        "ord": {
                          "type": "integer",
                          "example": 3,
                          "description": "The order number in the list"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "example": null
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "List employees",
        "description": "Retrieve the attributes of all your service providers",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Employee id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Company id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "By default only active employees are returned. This filter allows to return all the employees, including the inactive ones",
            "schema": {
              "type": "string",
              "enum": [
                "all"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "include_links",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first_name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "job",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bio",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photo_url",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "public_email",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "public_phone",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "receivesms",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sms_email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intuit_user_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ipp_mode",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "intuit_auth_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intuit_realm_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intuit_ticket_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newsletter",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_owner",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ics_service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ics_export_service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ics_url",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ics_export_hash",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "google_export_canceled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "google_export_add_pt",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nickname",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linkedin",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "yelp",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "pinterest",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "vimeo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "youtube",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "twitter",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "facebook",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Employee"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Create employee",
        "description": "Using this endpoint you can create a new service provider within the account",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Employee"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Employee"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Employee"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get an employee",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Employee id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Employee"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Modify employee",
        "description": "Using this endpoint you can change the attributes of a location within the account",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Employee id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Employee"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Employee"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Employee"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Delete employee",
        "description": "Using this endpoint you can delete a service provider within the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Employee id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee/{id}/assignAvailability": {
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Update availability",
        "description": "Using this endpoint you can change the availability of a service provider within the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Employee id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "company_id",
            "in": "body",
            "required": true,
            "description": "Company id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1234
          },
          {
            "name": "availabilities",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/components/schemas/EmployeeAvailability"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee/assignServices": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Assign all services and locations to an employee",
        "description": "Using this endpoint you can assign services and locations to an employee",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "employee_id",
            "in": "query",
            "description": "Employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "example": {
                      "45634": [
                        232,
                        34534
                      ]
                    },
                    "description": "The following format is used:\n`{ LOCATION_ID: [ SERVICE_1, SERVICE_2, ...]}`\nTo assign services to all locations for an employee:\n`{0: [SERVICE_1, SERVICE_2, ...]}`\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "example": null
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee/sync/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Synchronize employee",
        "description": "Using this endpoint you can synchronize a service provider with externals calendars.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Employee id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "export",
            "in": "query",
            "description": "If not present default action is the import",
            "schema": {
              "type": "boolean",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status of the operation",
                      "example": 0
                    },
                    "statusDescriptions": {
                      "type": "string",
                      "example": "SYNCED",
                      "description": "Description of the status"
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employee/getAvailabilityTime/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get availability time",
        "description": "Retrieves availability for an employee / service provider.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Employee id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "required": false,
            "description": "Company id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "availabilities": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/EmployeeAvailability"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee/getAvailabilityTime": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get availability time",
        "description": "Retrieves availability for an employee / service provider.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "employee_id",
            "in": "query",
            "required": true,
            "description": "Employee id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "required": false,
            "description": "Company id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "availabilities": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/EmployeeAvailability"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee/getAvailability": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get availability",
        "description": "Retrieves availability for an employee / service provider.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "employee_id",
            "in": "query",
            "required": true,
            "description": "Employee id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": true,
            "description": "Location id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "description": "Start Date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "description": "End Date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "start_date": {
                              "type": "string",
                              "example": "2018-09-01 12:12:12"
                            },
                            "end_date": {
                              "type": "string",
                              "example": "2018-09-03 12:12:12"
                            },
                            "boxes": {
                              "type": "object",
                              "example": {
                                "1": 100,
                                "2": 1
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee/uploadPhoto": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Upload photo",
        "description": "Using this endpoint you can add/update the employee photo",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "Employee id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/png, image/jpeg"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/UploadedFile"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee/removePhoto": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Remove photo",
        "description": "Using this endpoint you can remove the employee photo",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "Employee id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "required": [
                      "file_name"
                    ],
                    "properties": {
                      "file_name": {
                        "type": "string"
                      },
                      "provider": {
                        "type": "integer",
                        "description": "Employee Id",
                        "example": 2342
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "example": null
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee/updateOrder": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Update order number",
        "description": "Change the order in the list of employees",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "ord"
                      ],
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 27864,
                          "description": "Employee id"
                        },
                        "ord": {
                          "type": "integer",
                          "example": 3,
                          "description": "The order number in the list"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "example": null
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/employee/checknickname/{nickname}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Check nickname availability",
        "description": "Check nickname availability",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "nickname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status of the operation",
                      "example": 0
                    },
                    "statusDescriptions": {
                      "type": "string",
                      "example": "SYNCED",
                      "description": "nick_name already exists"
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employee/checknickname/{nickname}/{employeeId}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Check nickname availability",
        "description": "Check nickname availability",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "nickname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status of the operation",
                      "example": 0
                    },
                    "statusDescriptions": {
                      "type": "string",
                      "example": "SYNCED",
                      "description": "nick_name already exists"
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/availability": {
      "get": {
        "tags": [
          "Availability"
        ],
        "summary": "Get Availability Info",
        "description": "Retrieve available time intervals ",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "service_id",
            "in": "query",
            "required": true,
            "example": 2116,
            "description": "The ID of the selected service",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "subservices",
            "in": "query",
            "example": [
              2116,
              231
            ],
            "description": "The IDs of the selected subservices",
            "schema": {
              "type": "array",
              "collectionFormat": "csv",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "example": 2116,
            "description": "The ID of the selected location",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "provider_id",
            "in": "query",
            "example": 2116,
            "description": "The ID of the provider (employee)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "example": "2014-05-15",
            "description": "(YYYY-mm-dd) The day for which the availability is requested",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "t",
            "in": "query",
            "required": true,
            "description": " - If 'weekly', then the availability for the whole week of 'start_date' will be returned.\n- If 'daily', only the availability for 'start_date' will be returned",
            "example": "daily",
            "schema": {
              "type": "string",
              "enum": [
                "daily",
                "weekly"
              ]
            }
          },
          {
            "name": "return",
            "in": "query",
            "required": true,
            "description": " - If 'boxes', the availability will be returned as a set of boxes representing fractions of an hour.\n- If 'times', the availability will be returned as times when the availability slots begin. ",
            "example": "boxes",
            "schema": {
              "type": "string",
              "enum": [
                "boxes",
                "times"
              ]
            }
          },
          {
            "name": "timezone_id",
            "in": "query",
            "description": "The ID of the timezone relative to which the availability is calculated. Defaults to the location timezone.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 553
          },
          {
            "name": "first_available",
            "in": "query",
            "description": "When there is no availability from start_date to the end of the interval(t - daily/weekly), whole agenda is scanned until a first available time slot is returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "available_seats",
            "in": "query",
            "description": "Retrieve available seats for an appointment start time. This will return the number of seats for an employee. If none is provided, a random employee will be selected and the number of seats for that employee will be returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "total_seats",
            "in": "query",
            "description": "Use this parameter to get the total number of seats for all employees",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "no_of_weeks",
            "in": "query",
            "description": "Used to retreive the availability for one month. Accepted values are between 1 and 5",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5
            },
            "example": 4
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AvailabilityDetails"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/availability/saveHoliday": {
      "post": {
        "tags": [
          "Availability"
        ],
        "summary": "Save holiday",
        "description": "Creates a new holiday.",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Holiday"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Holiday"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Holiday"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/availability/saveHoliday/{id}": {
      "post": {
        "tags": [
          "Availability"
        ],
        "summary": "Modify holiday",
        "description": "Updates a holiday.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Holiday id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Holiday"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Holiday"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Holiday"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/availability/getHoliday": {
      "get": {
        "tags": [
          "Availability"
        ],
        "summary": "Get the list of holidays",
        "description": "Returns the list of holidays ordered by start_date",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Holiday"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/availability/getHoliday/{id}": {
      "get": {
        "tags": [
          "Availability"
        ],
        "summary": "Get one holiday",
        "description": "Returns the holiday with specified ID.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Holiday id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Company id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Holiday"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/availability/deleteHoliday/{ids}": {
      "post": {
        "tags": [
          "Availability"
        ],
        "summary": "Delete one or more holidays",
        "description": "Deletes the holidays with specified IDs.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "A list of holiday ids, separated by comma.\nExample:\n* 234,345\n* 234\n",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "234,543"
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Company id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/service": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "List services",
        "description": "Retrieve the attributes of all your services.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Service id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Company id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "description": "Location id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "active_services",
            "in": "query",
            "description": "Return only active services",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "auto_confirm",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_subservice",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "schema": {
              "type": "integer",
              "multipleOf": 15
            }
          },
          {
            "name": "duration_padding",
            "in": "query",
            "schema": {
              "type": "integer",
              "multipleOf": 5
            }
          },
          {
            "name": "max_clients",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "prior_notice",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after_notice",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cancel_appointment",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "reschedule_appointment",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "send_reminder",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start_step",
            "in": "query",
            "schema": {
              "type": "integer",
              "multipleOf": 5
            }
          },
          {
            "name": "set_schedule",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "price",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "payment_min_amount",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "allow_cash_payment",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "group_session",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "waiting_list",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "client_instructions",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widget_message",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active_from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "active_until",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "active_interval_status",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "photo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active_rules",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tmp_default",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Service"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create service",
        "description": "Create a new service within the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Service"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/service/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get a service",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Service"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Modify service",
        "description": "Modify a service within the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Service"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Delete service",
        "description": "Using this endpoint you can delete a service within the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/service/uploadPhoto": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Upload photo",
        "description": "Using this endpoint you can add/update the service photo",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "description": "Service id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/png, image/jpeg"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/UploadedFile"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/service/removePhoto": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Remove photo",
        "description": "Using this endpoint you can remove the service photo",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "description": "Service id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "required": [
                      "file_name"
                    ],
                    "properties": {
                      "file_name": {
                        "type": "string"
                      },
                      "service": {
                        "type": "integer",
                        "description": "Service Id",
                        "example": 2342
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "example": null
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/service/updateOrder": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Update order number",
        "description": "Change the order in the list of services",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "ord"
                      ],
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 27864,
                          "description": "Service id"
                        },
                        "ord": {
                          "type": "integer",
                          "example": 3,
                          "description": "The order number in the list"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "example": null
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "List appointments",
        "description": "Using this endpoint you can retrieve the attributes of all your existing Setster appointments. We advise using filters to fetch appointments on specific date ranges or attributes. See Filtering appointments in the Introduction section. ",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The appointment id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "employee_id",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "service_id",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ews_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timezone_id",
            "in": "query",
            "description": "Returns appointments date fields with specified time offset",
            "schema": {
              "type": "integer",
              "example": 553
            }
          },
          {
            "name": "ews_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_text",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custom_field_1",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custom_field_2",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custom_field_3",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custom_field_4",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custom_field_5",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paid",
            "in": "query",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "List pager",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "List pager / 'all' - no limit",
            "schema": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string",
                  "enum": [
                    "all"
                  ]
                }
              ],
              "default": 100
            }
          },
          {
            "name": "updated_after",
            "in": "query",
            "description": "Lower date limit for which the appointment was updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_before",
            "in": "query",
            "description": "Upper date limit for which the appointment was updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Lower date limit for which the appointment was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Upper date limit for which the appointment was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "num_results",
            "in": "query",
            "description": "If 1, the call returns only the number of appointments found",
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "start_date",
              "enum": [
                "start_date",
                "created"
              ]
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Appointment"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Create appointment",
        "description": "Using this endpoint you can create a new appointment within the account. You will have to specify the service and the service provider you are creating the appointment for, along with all the other appointment attributes. This will initiate the scheduling process within Setster. ",
        "security": [
          {
            "session_token": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -i -X POST \\\n'https://www.setster.com/api/v2/appointment?session_token=YOUR_API_KEY_HERE' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"data\": {\n    \"company_id\": 3123,\n    \"client_email\": \"user@example.com\",\n    \"client_name\": \"Test Client\",\n    \"client_phone\": \"12345678\",\n    \"client_address\": \"string\",\n    \"employee_id\": 12412,\n    \"location_id\": 54232,\n    \"service_id\": 453,\n    \"start_date\": \"2019-09-01 12:00\",\n    \"duration\": 15,\n    \"note\": \"string\",\n    \"status\": 0,\n    \"subservices\": \"string\",\n    \"paid\": false,\n    \"price\": 0,\n    \"ews_id\": \"\",\n    \"custom_fields\": {\n      \"1\": [\n        \"(01512) 793246\",\n        \"Work Phone\"\n      ],\n      \"2\": [\n        [\n          \"201 S. Division St.\",\n          \"500\",\n          \"Ann Arbor\",\n          \"MI\",\n          \"48104\"\n        ],\n        \"Full Address\"\n      ],\n      \"3\": [\n        \"123ABC\",\n        \"Coupon Code\",\n        \"h\"\n      ]\n    },\n    \"timezone_id\": 553\n  }\n}'\"\n"
          },
          {
            "lang": "JavaScript",
            "source": "const query = new URLSearchParams({\n  session_token: 'YOUR_API_KEY_HERE'\n}).toString();\nconst resp = await fetch(\n'https://www.setster.com/api/v2/appointment?' + query,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        data: {\n          company_id: 3123,\n          client_email: 'user@example.com',\n          client_name: 'Test Client',\n          client_phone: '12345678',\n          client_address: 'string',\n          employee_id: 12412,\n          location_id: 54232,\n          service_id: 453,\n          start_date: '2019-09-01 12:00',\n          duration: 15,\n          note: 'string',\n          status: 0,\n          subservices: 'string',\n          paid: false,\n          price: 0,                \n          ews_id: '',\n          custom_fields: {\n            '1': [\n              '(01512) 793246',\n              'Work Phone'\n            ],\n            '2': [\n              [\n                '201 S. Division St.',\n                '500',\n                'Ann Arbor',\n                'MI',\n                '48104'\n              ],\n              'Full Address'\n            ],\n            '3': [\n              '123ABC',\n              'Coupon Code',\n              'h'\n            ]\n          },\n          timezone_id: 553\n        }\n      })\n    }\n  );\n  const data = await resp.json();\n  console.log(data);\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Appointment"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Appointment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The appointment has been created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Appointment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "The appointment can not be created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment/{id}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get the details of an appointment",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Appointment id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Appointment"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Appointment"
        ],
        "summary": "Modify appointment",
        "description": "Using this endpoint you can modify the attributes for an appointment",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Appointment id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Appointment"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Appointment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Appointment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Delete appointment",
        "description": "Using this endpoint you can delete an appointment within the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Appointment id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment/listView": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "List appointments",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "query",
            "description": "Location ID",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "employee_id",
            "in": "query",
            "description": "Employee ID",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of results to skip",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The number of results to return",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "results": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Appointment"
                              }
                            },
                            "last_rows": {
                              "type": "integer",
                              "example": 100
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment/nextAvailableDay": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "List appointments",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "query",
            "description": "Location ID",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "service_id",
            "in": "query",
            "description": "Service ID",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "employee_id",
            "in": "query",
            "description": "Employee ID",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "one_day_return",
            "in": "query",
            "description": "Return only first day",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "availability": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": [
                                "2018-09-01 12:00:00",
                                "2018-09-02 12:00:00"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment/verify": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Verify appointment",
        "description": "Using this endpoint you can verify an appointment. This will initiate the verification system of an appointment. The client for that appointment will receive a “Verification required” email which will guide him in the verification process. ",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appointment_id": {
                    "type": "integer",
                    "example": 123
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "appointment_id": {
                    "type": "integer",
                    "example": 123
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Appointment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment/confirm": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Confirm appointment",
        "description": "Using this endpoint you can confirm an appointment",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "appointment_id": {
                    "type": "integer",
                    "example": 123
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appointment_id": {
                    "type": "integer",
                    "example": 123
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Appointment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment/decline": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Decline appointment",
        "description": "Using this endpoint you can decline an appointment",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "appointment_id",
                  "reason"
                ],
                "properties": {
                  "appointment_id": {
                    "type": "integer",
                    "example": 123
                  },
                  "reason": {
                    "type": "string"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "appointment_id",
                  "reason"
                ],
                "properties": {
                  "appointment_id": {
                    "type": "integer",
                    "example": 123
                  },
                  "reason": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Appointment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment/upcoming": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "List all upcoming appointments",
        "description": "Using this endpoint you can list all future appointments within the account. Future appointments are the appointments that have the start date in the future",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "last_rows": {
                              "type": "boolean"
                            },
                            "records": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Appointment"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment/hash": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get hash key for an appointment",
        "description": "Returns the hash key for an appointment",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "appointment_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "hash_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "cancel",
                "reschedule",
                "confirm"
              ],
              "default": "reschedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "string",
                          "description": "The hash key",
                          "example": "bkl43mfgn43k"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment/hash/{id}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get hash key for an appointment",
        "description": "Returns the hash key for an appointment",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "hash_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "cancel",
                "reschedule",
                "confirm"
              ],
              "default": "reschedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "string",
                          "description": "The hash key",
                          "example": "bkl43mfgn43k"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/appointment/sendReminder": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Send reminder for appointment",
        "description": "Using this endpoint you can send a reminder email for an appointment",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "appointment_id",
                  "reason"
                ],
                "properties": {
                  "appointment_id": {
                    "type": "integer",
                    "example": 123
                  },
                  "send_to": {
                    "type": "string",
                    "enum": [
                      "client",
                      "provider",
                      "both"
                    ],
                    "default": "both"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "appointment_id",
                  "reason"
                ],
                "properties": {
                  "appointment_id": {
                    "type": "integer",
                    "example": 123
                  },
                  "send_to": {
                    "type": "string",
                    "enum": [
                      "client",
                      "provider",
                      "both"
                    ],
                    "default": "both"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status of the operation",
                      "example": 0
                    },
                    "statusDescriptions": {
                      "type": "string",
                      "example": "Sent to provider/client/provider and client",
                      "description": "Description of the status"
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customfield": {
      "get": {
        "tags": [
          "Custom Field"
        ],
        "summary": "List custom fields",
        "description": "Using this endpoint you can retrieve the attributes of all your existing Setster custom fields",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Custom field id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Company id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "label",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "length",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "required",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "readonly",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "removable",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "readonly_type",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "hint",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CustomField"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Create custom field",
        "description": "Using this endpoint you can create a new custom field within the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CustomField"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/customfield/{id}": {
      "get": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Get a Custom Field",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Custom Field id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CustomField"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Modify custom field",
        "description": "Using this endpoint you can change the attributes of a custom field object within the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Custom field id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CustomField"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Delete custom field",
        "description": "Using this endpoint you can delete a custom field within the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Custom field id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/customfield/bulksave": {
      "post": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Save multiple custom fields",
        "description": "Using this endpoint you can update multiple custom fields or create multiple new custom fields.",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomField"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CustomField"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/client": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "List clients",
        "description": "Using this endpoint you can retrieve the attributes of all your existing Setster clients.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "List pager",
            "x-default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "List pager / 'all' - no limit",
            "default": 100,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "employee_id",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_app_date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferences",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address2",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zip",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gender",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "birthday",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_since",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept_emails",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Client"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Create Client",
        "description": "Using this endpoint you can create a new client within the account",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Client"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/client/{id}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get a Client",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Client"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Client"
        ],
        "summary": "Modify Client",
        "description": "Using this endpoint you can modify the attributes for a client",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Client id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Client"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client"
        ],
        "summary": "Delete client",
        "description": "Using this endpoint you can delete a client from the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Client id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/client/uploadPicture": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Client upload picture",
        "description": "Using this endpoint you can add/update the client picture",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/png, image/jpeg"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/UploadedFile"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tz/list": {
      "get": {
        "tags": [
          "Time Zone"
        ],
        "summary": "List of time zones",
        "description": "Retrieve system time zones",
        "parameters": [
          {
            "name": "reverse_caption",
            "in": "query",
            "description": "Get the caption with a different format",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/components/schemas/TimeZone"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tz/data": {
      "get": {
        "tags": [
          "Time Zone"
        ],
        "summary": "Get timezone offset",
        "description": "Returns the offset of a timezone",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The timezone id",
            "schema": {
              "type": "integer",
              "default": 553
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The timestamp at which the offset whould be calculated",
            "schema": {
              "type": "integer",
              "default": 1536583485
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "object",
                              "properties": {
                                "offset": {
                                  "type": "integer",
                                  "example": 3600
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscribe": {
      "get": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Get the list of webHooks",
        "description": "Returns the list of webHooks",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "target_url",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "active",
            "in": "query",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "verification_key",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ReadWebHook"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Create a webHook",
        "description": "Create a webHook",
        "security": [
          {
            "session_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WriteWebHook"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WriteWebHook"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ReadWebHook"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscribe/{id}": {
      "get": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Get a webHook",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "WebHook id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ReadWebHook"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Modify WebHook",
        "description": "Using this endpoint you can modify the attributes for a webHook",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "WebHook id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WriteWebHook"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WriteWebHook"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ReadWebHook"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Delete WebHook",
        "description": "Using this endpoint you can delete a webHook from the account.",
        "security": [
          {
            "session_token": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "WebHook id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseStatus"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "session_token": {
        "type": "apiKey",
        "name": "session_token",
        "in": "query",
        "description": "To get the session_token, first you need to make a POST\nrequest to \"account/authenticate\" using your API key or\nusername and password. The session token is the element\n\"data.session_token\" from the response.\n"
      }
    },
    "schemas": {
      "Account": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountBusinessInfo"
          },
          {
            "$ref": "#/components/schemas/AccountPersonalInfo"
          },
          {
            "type": "object",
            "required": [
              "email",
              "password"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "company_id": {
                "type": "integer",
                "format": "int64",
                "example": 2345,
                "description": "Unique ID of the account",
                "readOnly": true
              },
              "created_by": {
                "type": "integer",
                "format": "int64",
                "example": 1242,
                "description": "ID of the company owner",
                "readOnly": true
              },
              "address_city": {
                "type": "string",
                "description": "Account/Default location personal info.",
                "example": "Los Angeles"
              },
              "address_country": {
                "type": "string",
                "description": "Account/Default location personal info.",
                "example": "USA"
              },
              "address_state": {
                "type": "string",
                "description": "Account/Default location personal info.",
                "example": "Nevada"
              },
              "address_street1": {
                "type": "string",
                "description": "Account/Default location personal info.",
                "example": "123 Street"
              },
              "address_street2": {
                "type": "string",
                "description": "Account/Default location personal info.",
                "example": ""
              },
              "addresszip": {
                "type": "string",
                "description": "Account/Default location personal info.",
                "example": "245235"
              },
              "send_to_contact": {
                "type": "integer",
                "default": 0
              },
              "show_map_profile": {
                "type": "boolean",
                "default": false
              },
              "splash": {
                "type": "string"
              },
              "map_url": {
                "type": "string",
                "format": "uri",
                "description": "An http address used for locations display",
                "example": ""
              },
              "return_url": {
                "type": "string"
              },
              "policies": {
                "type": "string"
              },
              "account_type": {
                "type": "integer",
                "format": "int32",
                "description": "Account bussiness profile: 0 - Free User, 1 - Personal, 2 - Small Business, 4 - Medium Business, 5 - Large Business, 6 - Team",
                "example": "0",
                "enum": [
                  0,
                  1,
                  2,
                  4,
                  5,
                  6
                ]
              },
              "date_created": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "no_views": {
                "type": "string",
                "readOnly": true
              },
              "notify_app_unconfirmed": {
                "type": "boolean",
                "default": true
              },
              "notify_app_unpaid": {
                "type": "boolean",
                "default": true
              },
              "lang": {
                "type": "string",
                "enum": [
                  "en",
                  "fr",
                  "es"
                ],
                "description": "Language",
                "default": "en"
              },
              "enable_locations": {
                "type": "boolean",
                "description": "Allow other location than the implicit one",
                "default": false
              },
              "capture_leads": {
                "type": "string"
              },
              "settings": {
                "type": "string",
                "format": "json",
                "readOnly": true
              },
              "status": {
                "type": "integer",
                "default": 0,
                "readOnly": true
              },
              "directory": {
                "type": "integer",
                "default": 0
              },
              "max_providers": {
                "type": "integer",
                "format": "int32",
                "description": "The maximum number of locations and providers that the company is allowed to add",
                "default": 0
              },
              "business_hours_label": {
                "type": "string"
              },
              "policies_label": {
                "type": "string"
              },
              "paragraph_label": {
                "type": "string"
              },
              "timezone": {
                "type": "integer",
                "format": "int32",
                "description": "Gmt offset in minutes",
                "example": -480,
                "default": 0
              },
              "exchange_sync_settings": {
                "type": "object",
                "readOnly": true,
                "properties": {
                  "host": {
                    "type": "string"
                  },
                  "account": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "sync_period": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "AccountBusinessInfo": {
        "type": "object",
        "required": [
          "company_name",
          "nick_name"
        ],
        "properties": {
          "company_name": {
            "type": "string",
            "description": "Name of the company",
            "example": "Apple"
          },
          "nick_name": {
            "type": "string",
            "description": "Unique string Ex: nick_name.setster.com. May contain only letters and digits",
            "example": "apple"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "description": "Business website url",
            "example": ""
          },
          "contact": {
            "type": "string",
            "format": "email",
            "description": "Company main email address"
          },
          "facebook": {
            "type": "string",
            "format": "uri",
            "description": "Facebook url",
            "example": ""
          },
          "linkedin": {
            "type": "string",
            "format": "uri",
            "description": "Linkedin url",
            "example": ""
          },
          "twitter": {
            "type": "string",
            "format": "uri",
            "description": "Twitter url",
            "example": ""
          },
          "skype_name": {
            "type": "string",
            "description": "Skype nick name",
            "example": ""
          },
          "yelp": {
            "type": "string"
          },
          "pinterest": {
            "type": "string"
          },
          "vimeo": {
            "type": "string"
          },
          "youtube": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "description": "Business phone",
            "example": ""
          },
          "timezone_id": {
            "type": "integer",
            "default": 553
          },
          "fax": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "paragraph": {
            "type": "string"
          },
          "business_hours": {
            "type": "string",
            "description": "Availability for the default employee",
            "example": "",
            "writeOnly": true
          }
        }
      },
      "AccountOptions": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "integer",
            "example": 654
          },
          "email_settings": {
            "type": "object",
            "writeOnly": true,
            "required": [
              "widget_send_client_emails",
              "widget_send_provider_emails",
              "send_reminder"
            ],
            "properties": {
              "widget_send_client_emails": {
                "type": "integer",
                "enum": [
                  0,
                  1
                ]
              },
              "widget_send_provider_emails": {
                "type": "integer",
                "enum": [
                  0,
                  1
                ]
              },
              "send_reminder": {
                "type": "integer"
              }
            }
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "hide_contact": {
            "type": "boolean",
            "default": 0
          },
          "hide_about": {
            "type": "boolean",
            "default": 0
          },
          "show_email": {
            "type": "boolean",
            "default": 0
          },
          "show_provider_image": {
            "type": "boolean",
            "default": 0
          },
          "providers_tab_option": {
            "type": "string",
            "example": "2"
          },
          "select_single_service": {
            "type": "boolean",
            "default": 1
          },
          "default_calendar_view": {
            "type": "string",
            "enum": [
              "d",
              "w"
            ],
            "default": "d"
          },
          "month_view_availability": {
            "type": "integer",
            "example": 1
          },
          "email_confirmation": {
            "type": "integer",
            "example": 1
          },
          "book_another_appointment": {
            "type": "boolean",
            "default": 0
          },
          "display_google_map_on_locations": {
            "type": "boolean",
            "default": 0
          },
          "hide_timezone_alert": {
            "type": "boolean",
            "example": 0
          },
          "select_single_location": {
            "type": "boolean",
            "default": 1
          },
          "show_in_host_or_client_time": {
            "type": "boolean",
            "default": 0
          },
          "email_timezone_alert": {
            "type": "boolean",
            "default": 0
          },
          "widget_customBookingFields": {
            "type": "string",
            "example": "a:4:{s:13:\"provider_date\";i:1;s:13:\"provider_time\";i:1;s:8:\"location\";i:1;s:7:\"service\";i:1;}"
          },
          "enable_mobile_widget": {
            "type": "boolean",
            "default": 1
          },
          "any_available_provider": {
            "type": "string",
            "example": "1"
          },
          "show_staff_photo": {
            "type": "boolean",
            "example": 1
          },
          "auto_confirm": {
            "type": "boolean",
            "example": 0
          },
          "prior_notice": {
            "type": "integer",
            "example": 0
          },
          "prior_cancel_appointment": {
            "type": "integer",
            "example": 0
          },
          "prior_reschedule_appointment": {
            "type": "integer",
            "example": 0
          },
          "duration_padding": {
            "type": "integer",
            "example": 30
          },
          "start_step": {
            "type": "integer",
            "example": 0
          },
          "after_notice": {
            "type": "integer",
            "example": 0
          },
          "allow_cash_payment": {
            "type": "boolean",
            "example": 0
          },
          "waiting_list": {
            "type": "boolean",
            "example": 0
          },
          "layout_params": {
            "type": "string",
            "example": "a:5:{s:14:\"overlay_option\";s:7:\"overlay\";s:8:\"position\";s:5:\"right\";s:11:\"button_name\";s:11:\"Appointment\";s:12:\"button_color\";s:6:\"ff0000\";s:13:\"locations_map\";i:0;}"
          },
          "style_params": {
            "type": "string",
            "default": ""
          },
          "new_style": {
            "type": "integer",
            "example": 1
          },
          "new_mobile_style": {
            "type": "integer",
            "example": 1
          },
          "widget_send_client_emails": {
            "type": "boolean",
            "example": 1
          },
          "widget_send_provider_emails": {
            "type": "boolean",
            "example": 1
          },
          "send_reminder": {
            "type": "boolean",
            "example": 24
          },
          "notify_app_unconfirmed": {
            "type": "boolean",
            "example": 1
          },
          "send_to_contact": {
            "type": "boolean",
            "example": 0
          },
          "notify_app_unpaid": {
            "type": "boolean",
            "example": 1
          },
          "lang": {
            "type": "string",
            "default": "en"
          },
          "timezone_id": {
            "type": "integer",
            "example": 553
          },
          "currenciesStripe": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "AED",
              "AFN",
              "ALL"
            ]
          },
          "currenciesPaypal": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "AED",
              "AFN",
              "ALL"
            ]
          },
          "stripe_client_id": {
            "type": "string",
            "example": "ca_3zSQAHuNlO64Jsfg45Tk8vdfg2A"
          }
        }
      },
      "AccountPersonalInfo": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Contact of the main and default employee. Together with the password is used as user name"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Used along with the account email",
            "example": "i39j02ksnfj40f"
          },
          "first_name": {
            "type": "string",
            "description": "Personal info for the main/default employee",
            "example": ""
          },
          "last_name": {
            "type": "string",
            "description": "Personal info for the main/default employee",
            "example": ""
          },
          "phone": {
            "type": "string",
            "description": "Business phone",
            "example": ""
          }
        }
      },
      "Location": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of the location",
            "example": 12345,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "required": true,
            "description": "Name of the location",
            "example": "Spa center"
          },
          "description": {
            "type": "string",
            "description": "Description of the location",
            "default": ""
          },
          "company_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the company that owns the location. Field is writable when entity is owned by child accounts.",
            "example": 432
          },
          "is_main": {
            "type": "boolean",
            "readOnly": true,
            "default": false,
            "description": "Whether this is the main location for the company (the location created on registration)"
          },
          "virtual": {
            "type": "boolean",
            "default": false
          },
          "street1": {
            "type": "string",
            "description": "Address line 1",
            "example": "13 Beverly"
          },
          "street2": {
            "type": "string",
            "description": "Address line 2",
            "example": ""
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State",
            "example": "NY"
          },
          "zip": {
            "type": "string",
            "description": "Zip",
            "example": "10501"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": ""
          },
          "photo": {
            "type": "string",
            "format": "uri",
            "description": "Photo URL",
            "example": ""
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "default": ""
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "description": "Website URL",
            "example": ""
          },
          "tags": {
            "type": "string",
            "default": ""
          },
          "paypal_email": {
            "type": "string",
            "format": "email",
            "description": "The PayPal account used for payments for the appointments that are booked on this location. If empty, the company account will be used."
          },
          "timezone_id": {
            "type": "string",
            "description": "The ID of the time zone",
            "example": 553
          },
          "lat": {
            "type": "number",
            "format": "float",
            "description": "The latitude of the location automatically calculated based on its address"
          },
          "lng": {
            "type": "number",
            "format": "float",
            "description": "The longitude of the location automatically calculated based on its address"
          },
          "update_lat_lng": {
            "type": "boolean",
            "description": "Available only on update. If true (1) then the lat and lng values will be automatically calculated",
            "default": false,
            "writeOnly": true
          },
          "ord": {
            "type": "integer",
            "default": 0,
            "readOnly": true
          },
          "links": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "Links with employees and services.\n\nIf *links: \\\"all\\\"*, all providers and services will be linked to this location.\n\nIf *links: {EMPLOYEE_ID: \\\"all\\\"}*,  all services will be linked to this location for the provider with EMPLOYEE_ID id.\n\nIf *links: {\\\"all\\\": {SERVICE_ID_1: 1, SERVICE_ID_2: 1, ... }}*, the services with id's SERVICE_ID_1, SERVICE_ID_2, ... will be linked to this location for all the providers\n\nIf *links: {\\\"EMPLOYEE_ID_1\\\": { SERVICE_ID_1: 1, SERVICE_ID_2: 1, ... }, \\\"EMPLOYEE_ID_2\\\": { SERVICE_ID_3: 1, SERVICE_ID_4: 1, ... }, ... }*,  the specified services will be linked with the specified providers\n",
            "example": {
              "344": {
                "4433": 1,
                "4823": 1
              },
              "345": "all",
              "all": {
                "4532": 1,
                "5432": 1
              }
            },
            "writeOnly": true
          }
        }
      },
      "Employee": {
        "type": "object",
        "required": [
          "company_id",
          "email",
          "first_name",
          "last_name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of the employee",
            "example": 1234,
            "readOnly": true
          },
          "company_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the company of the employee. Field is writable when entity is owned by child account.",
            "example": 3214
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Unique Email address of the employee"
          },
          "first_name": {
            "type": "string",
            "description": "First Name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last Name",
            "example": "Doe"
          },
          "job": {
            "type": "string",
            "description": "Job name",
            "example": "Accountant"
          },
          "bio": {
            "type": "string",
            "description": "Bio"
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "example": ""
          },
          "photo_url": {
            "type": "string",
            "format": "uri",
            "description": "Photo URL",
            "example": ""
          },
          "public_email": {
            "type": "boolean",
            "description": "Whether or not the employee's email will be displayed on the widget",
            "default": false
          },
          "public_phone": {
            "type": "boolean",
            "default": false
          },
          "status": {
            "type": "boolean",
            "description": "Employee status: active / inactive",
            "default": false
          },
          "username": {
            "type": "string",
            "description": "Automatically generated based on the first and last names",
            "example": "",
            "readOnly": true
          },
          "nickname": {
            "type": "string",
            "description": "Unique nickname per company. May contain only letters, digits, the dot character and the underline character.",
            "example": ""
          },
          "linkedin": {
            "type": "string",
            "format": "uri",
            "description": "LinkedIn URL",
            "default": ""
          },
          "yelp": {
            "type": "string",
            "format": "uri"
          },
          "pinterest": {
            "type": "string",
            "format": "uri"
          },
          "vimeo": {
            "type": "string",
            "format": "uri"
          },
          "youtube": {
            "type": "string",
            "format": "uri"
          },
          "twitter": {
            "type": "string",
            "format": "uri",
            "description": "Twitter URL",
            "example": ""
          },
          "facebook": {
            "type": "string",
            "format": "uri",
            "description": "Facebook URL",
            "example": ""
          },
          "receivesms": {
            "type": "boolean",
            "description": "If true (1) then the employee will receive an SMS message informing them about new appointments",
            "default": false
          },
          "sms_email": {
            "type": "string",
            "format": "email",
            "description": "The SMS service to be used in the following format: number@sms-service.com. Note: the number keyword will be replaced with the employee's phone number before the SMS is sent.",
            "example": "number@txt.att.net"
          },
          "intuit_user_id": {
            "type": "string"
          },
          "ipp_mode": {
            "type": "integer"
          },
          "intuit_auth_id": {
            "type": "string"
          },
          "intuit_db_id": {
            "type": "string"
          },
          "intuit_realm_id": {
            "type": "string"
          },
          "intuit_ticket_id": {
            "type": "string"
          },
          "newsletter": {
            "type": "integer"
          },
          "is_owner": {
            "type": "boolean",
            "description": "Whether the employee is the owner of the company (the employee created at signup). By updating the value for a created employee, areas from permissions can be managed for (all - 1/own - 0) account(s)",
            "default": false,
            "readOnly": true
          },
          "ics_service": {
            "type": "integer",
            "format": "int32",
            "description": "Import calendar source type. Possible values: 0 - Not set 1 - Google 2 - Outlook or other public URL calendar source (ics) 3 - Exchange",
            "default": 0,
            "enum": [
              0,
              1,
              2,
              3
            ]
          },
          "ics_export_service": {
            "type": "integer",
            "format": "int32",
            "description": "Export calendar source type. Possible values: 0 - Not set 1 - Outlook 2 - Ical 3 - Google 4 - Yahoo 5 - MSN 6 - ICalDav",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "default": 0
          },
          "ics_url": {
            "type": "string",
            "format": "uri",
            "description": "iCalendar public url used as import source."
          },
          "ics_export_hash": {
            "type": "string"
          },
          "google_export_canceled": {
            "type": "integer",
            "default": 0
          },
          "google_export_add_pt": {
            "type": "integer",
            "default": 0
          },
          "ord": {
            "type": "integer",
            "readOnly": true,
            "default": 0
          },
          "ics_export_url": {
            "type": "string",
            "description": "iCalendar public url used as export source.",
            "readOnly": true
          },
          "permissions": {
            "type": "string",
            "description": "Lable(s) for different application sections. In order to set permission an employee must have a user(can_login - 1). Possible values: locations, providers, services, availability, appointments, get_widget, promote, clients, overview, calendar, settings, profile, account",
            "example": "locations, providers"
          },
          "can_login": {
            "type": "boolean",
            "description": "Whether the employee can login to his account or not. An employee that cannot login will not have access to the API.",
            "readOnly": true,
            "example": 1
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "send_invite_email": {
            "type": "boolean",
            "description": "Available only when creating a new employee - will send an email to the email address of the newly created employee",
            "writeOnly": true
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              }
            },
            "writeOnly": true,
            "description": "Links with locations and services",
            "example": {
              "[LOCATION_ID]": {
                "[SERVICE_ID]": 1
              }
            }
          }
        }
      },
      "EmployeeAvailability": {
        "type": "object",
        "required": [
          "repeat",
          "type",
          "start_date",
          "end_date",
          "days"
        ],
        "properties": {
          "repeat": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "1 - weekly/ 2 - Date interval",
            "example": 1
          },
          "type": {
            "type": "boolean",
            "description": "0 - Available/ 1 - Out of Office",
            "example": 0
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "example": "12/1/2015"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "example": "12/31/2015"
          },
          "location_id": {
            "type": "integer",
            "description": "optional for single location enabled",
            "example": 2144
          },
          "days": {
            "type": "object",
            "example": {
              "mo": {
                "time": [
                  [
                    "10:00",
                    "18:00"
                  ],
                  [
                    "22:00",
                    "23:00"
                  ]
                ]
              },
              "tu": {
                "time": [
                  [
                    "14:00",
                    "18:00"
                  ],
                  [
                    "20:00",
                    "23:00"
                  ]
                ]
              }
            }
          }
        }
      },
      "Service": {
        "type": "object",
        "required": [
          "company_id",
          "name",
          "duration"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of the service",
            "readOnly": true,
            "example": 1234
          },
          "name": {
            "type": "string",
            "description": "The name of the service",
            "example": "Default service"
          },
          "company_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the company that the service belongs to. Field is writable when entity is owned by child account",
            "example": 5678
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "multipleOf": 15,
            "description": "The duration of the service in minutes",
            "default": 60
          },
          "description": {
            "type": "string",
            "description": "The description of the service",
            "example": "This service should be used in testing only"
          },
          "auto_confirm": {
            "type": "boolean",
            "description": "If true (1) then the appointments made for the service will be automatically confirmed. If false (0) then the appointments must be confirmed by the provider.",
            "default": false
          },
          "is_subservice": {
            "type": "boolean",
            "description": "If true (1) the service will be an additional service, otherwise it will be a base service.",
            "default": false
          },
          "duration_padding": {
            "type": "integer",
            "format": "int32",
            "multipleOf": 5,
            "description": "The minimum number of minutes between two adjacent appointments",
            "default": 0
          },
          "max_clients": {
            "type": "integer",
            "default": 0
          },
          "prior_notice": {
            "type": "integer",
            "description": "The minimum number of hours the appointment has to be scheduled before the scheduled time",
            "default": 0
          },
          "after_notice": {
            "type": "integer",
            "description": "The maximum number of days the appointment has to be scheduled after the scheduled time",
            "default": 0
          },
          "cancel_appointment": {
            "type": "integer",
            "description": "The minimum number of hours before the appointment until the client can cancel the appointment. If 0 the client cannot cancel the appointment.",
            "default": 0
          },
          "reschedule_appointment": {
            "type": "integer",
            "description": "The minimum number of hours before the appointment until the client can reschedule the appointment. If 0, the client cannot reschedule.",
            "default": 0
          },
          "send_reminder": {
            "type": "integer",
            "description": "The minimum number of hours before the appointment until the client can reschedule the appointment. If 0, the client cannot reschedule.",
            "default": 0
          },
          "start_step": {
            "type": "integer",
            "multipleOf": 5,
            "description": "Number of minutes.\nIf this field has a value different than 0, then the clients can choose any start time (in increments equal to the value of the field) for their appointment in the availability zone.\nIf the value of the field is 0, then the clients can select only predefined time slots for the appointments.\n",
            "default": 0
          },
          "set_schedule": {
            "type": "boolean",
            "description": "If `true` the service can only be performed on the schedule times. If `true`, availability can be added to the service through the `schedule` field",
            "default": false
          },
          "schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceSchedule"
            },
            "description": "The service can only be performed on the following times. The `set_schedule` needs to be set to `true` for this field to be considered."
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "writeOnly": true,
            "description": "Links with locations and employees.\nThe links property may contain more than one of the above structures:\n{\"[EMPLOYEE_ID]\" : {\"[LOCATION_ID]\":1}}\n",
            "example": {
              "13367": {
                "16982": 1,
                "19281": 0,
                "19387": 0,
                "19540": 0
              }
            }
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The price of the service",
            "default": 0
          },
          "payment_min_amount": {
            "type": "number",
            "format": "double",
            "description": "The minimum amount required for the payment to be valid",
            "default": 0
          },
          "allow_cash_payment": {
            "type": "boolean",
            "description": "Whether or not to allow the client to skip the online payment and pay with cash",
            "default": false
          },
          "group_session": {
            "type": "integer",
            "default": 0,
            "description": "The number of appointments that can be scheduled in the same time slot."
          },
          "waiting_list": {
            "type": "integer",
            "default": 0
          },
          "client_instructions": {
            "type": "string",
            "description": "The message sent to the client in the confirmation email (after the client verifies his/her email address)"
          },
          "widget_message": {
            "type": "string",
            "description": "The message displayed on the widget after the client books an appointments"
          },
          "password": {
            "type": "string"
          },
          "ord": {
            "type": "integer",
            "description": "The order number of the service",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The time when the service was created"
          },
          "active_from": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "The date when the service starts to show up on the widget. If this field is null, then there will be no limit on the start date.\n\nTo set the field to null, set it to the empty string when updating the service.\n"
          },
          "active_until": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "The date when the service stops being displayed on the widget. If this field is null, then there will be no limit on the end date.\n\nTo set the field to null, set it to the empty string when updating the service.\n"
          },
          "active_interval_status": {
            "type": "boolean",
            "default": true
          },
          "status": {
            "type": "boolean",
            "description": "If 0 the service will not appear on the widget.",
            "default": true
          },
          "active_rules": {
            "type": "integer",
            "default": 1
          },
          "photo": {
            "type": "string"
          }
        }
      },
      "ServiceSchedule": {
        "type": "object",
        "properties": {
          "repeat": {
            "type": "integer",
            "enum": [
              0,
              1,
              2
            ],
            "description": "0 - one-time event / 1 - weekly / 2 - monthly",
            "example": 1
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "a date string with the format `day/month/year`",
            "example": "01/06/2019"
          },
          "start_time": {
            "type": "object",
            "$ref": "#/components/schemas/Time",
            "description": "the start hour in the day",
            "example": {
              "hour": 9,
              "min": 0,
              "am": "am"
            }
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "a date string with the format `day/month/year`. Used only if `repeat = 1` or `repeat = 2`",
            "example": "01/12/2019"
          },
          "end_time": {
            "type": "object",
            "$ref": "#/components/schemas/Time",
            "description": "the end hour in the day",
            "example": {
              "hour": 5,
              "min": 0,
              "am": "pm"
            }
          },
          "days": {
            "type": "object",
            "example": {
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1
            },
            "additionalProperties": {
              "type": "integer"
            },
            "description": "A list of day numbers for the days when the service is available, of the form: `{\"index1\": 1,\"index2\": 1,...}`.\nIgnored when repeat = 0. If `repeat = 1`, `index1, index2,...` represents the day number in the week.\nIf `repeat = 2`, it represents the day number in the month.\n"
          }
        }
      },
      "Appointment": {
        "type": "object",
        "required": [
          "client_email",
          "client_name",
          "service_id",
          "start_date"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique ID of the appointment",
            "example": 2342
          },
          "client_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The ID of the client that made the appointment",
            "example": 23113
          },
          "company_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the company that the appointment belongs to. Field is writable when entity is owned by child account",
            "example": 3123
          },
          "client_email": {
            "type": "string",
            "format": "email",
            "description": "The email of the client that made the appointment"
          },
          "client_name": {
            "type": "string",
            "description": "The client name",
            "example": "Test Client"
          },
          "client_phone": {
            "type": "string",
            "description": "The client phone number",
            "example": "12345678"
          },
          "client_address": {
            "type": "string",
            "description": "The client address"
          },
          "employee_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the employee (provider) that the appointment is made for",
            "example": 12412
          },
          "location_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the location where the appointment will take place at",
            "example": 54232
          },
          "service_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the service that the appointment is made for",
            "example": 453
          },
          "start_date": {
            "type": "string",
            "example": "2019-09-01 12:00",
            "description": "The date and time when the appointment is scheduled to start.\nThe time is local to the company timezone or the location timezone (if the location is in a different timezone).\nThe format of the date is `yyyy-mm-dd hh:mm:ss`\n"
          },
          "end_date": {
            "type": "string",
            "readOnly": true,
            "example": "2019-09-01 13:00",
            "description": "The date and time when the appointment is scheduled to end.\nThe time is local to the company timezone or the location timezone (if the location is in a different timezone).\nThe format of the date is `yyyy-mm-dd hh:mm:ss`\n"
          },
          "length": {
            "type": "integer",
            "readOnly": true,
            "description": "The duration of the appointment (in milliseconds). Example: 30 minutes = 1800000 milliseconds.",
            "example": 1800000
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true,
            "multipleOf": 15,
            "description": "The duration of the appointment in minutes",
            "default": 15
          },
          "duration_padding": {
            "type": "integer",
            "description": "The appointment time padding (in seconds) - the number of seconds, before and after an appointment, that cannon be used for another appointment",
            "readOnly": true,
            "default": 0
          },
          "note": {
            "type": "string",
            "description": "Custom client message",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "Appointment status. Possible values:\n\n  - 0 - waiting email confirmation from the client\n  - 1 - email confirmed but not validated by the admin/provider\n  - 2 - email confirmed and validated or paid\n  - 3 - declined or canceled\n  - 4 - busy time imported from external sources (e.g. google)\n  - 6 - busy time imported from Zapier\n  - 8 - completed\n  - 9 - no show (the scheduled event did not take place)\n  - 10 - in progress\n  - 11 - checked in\n  - 12 - just arrived\n  - 13 - delayed\n",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              6,
              8,
              9,
              10,
              11,
              12,
              13
            ]
          },
          "type": {
            "type": "string",
            "description": "The name of the service with ID service_id",
            "readOnly": true
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the latest change was made to the appointment",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "subservices": {
            "type": "string",
            "description": "IDs of sub services that were selected for the appointment separated by comma"
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the appointment has been paid or not, if the service requires a payment.",
            "default": false
          },
          "price": {
            "type": "integer",
            "default": 0
          },
          "ews_id": {
            "type": "string",
            "default": ""
          },
          "custom_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "The values of the custom fields filled by the client. The field can be updated only with a reschedule action.\n\nFormat: {\"FIELD_INDEX\":[\"VALUE\",\"LABEL\",\"TYPE\"], ...}, with TYPE being set only for hidden fields when it takes the value \"h\"\n\n- `FIELD_INDEX`:  the custom field index as defined by the user.\n- `VALUE`:  the value filled in by the client. If the custom field type is Address, then this field will be a JSON array with 5 elements: address, apt, city, state/province and zip, in this order\n- `LABEL`:  the label of the custom field\n- `TYPE`:  has a single possible value - \"h\" - and is present only for hidden fields\n",
            "example": {
              "1": [
                "(01512) 793246",
                "Work Phone"
              ],
              "2": [
                [
                  "201 S. Division St.",
                  "500",
                  "Ann Arbor",
                  "MI",
                  "48104"
                ],
                "Full Address"
              ],
              "3": [
                "123ABC",
                "Coupon Code",
                "h"
              ]
            }
          },
          "timezone_short": {
            "type": "string",
            "description": "The time zone short name (e.g. PST or GMT+4)",
            "readOnly": true,
            "example": "GMT -05:00"
          },
          "timezone_offset_seconds": {
            "type": "integer",
            "description": "The time zone offset in seconds",
            "example": -18000,
            "readOnly": true
          },
          "timezone_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the time zone in our database",
            "example": 553
          }
        }
      },
      "CustomField": {
        "type": "object",
        "required": [
          "company_id",
          "label",
          "length",
          "type",
          "required",
          "ord",
          "status",
          "visibility",
          "readonly",
          "hint"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of the custom field",
            "readOnly": true
          },
          "company_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the company that the custom field belongs to"
          },
          "label": {
            "type": "string",
            "description": "The label of the custom field"
          },
          "length": {
            "type": "integer",
            "description": "The max string length of the custom field"
          },
          "type": {
            "type": "integer",
            "description": "Type of the custom field. Possible values:\n\n- 0 - text\n- 1 - multiline\n- 2 - phone\n- 3 - email\n- 4 - hidden\n- 5 - address\n- 6 - title\n",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "default": 0
          },
          "required": {
            "type": "boolean",
            "description": "If the custom field is mandatory in the booking form",
            "default": false
          },
          "ord": {
            "type": "integer",
            "description": "The order in layout"
          },
          "status": {
            "type": "boolean",
            "description": "The enabled/disabled status."
          },
          "visibility": {
            "type": "integer",
            "enum": [
              1,
              2,
              3
            ],
            "description": "Places where the custom field is visible. Possible values:\n  - 1 - Appointment submit form\n  - 2 - Contact form\n  - 3 - Both forms\n"
          },
          "readonly": {
            "type": "boolean",
            "description": "The readonly property of the custom field form.",
            "default": false
          },
          "removable": {
            "type": "boolean",
            "default": false
          },
          "readonly_type": {
            "type": "integer"
          },
          "hint": {
            "type": "string",
            "description": "The hint property of the custom field form"
          }
        }
      },
      "Client": {
        "type": "object",
        "required": [
          "company_id",
          "employee_id",
          "email",
          "name"
        ],
        "properties": {
          "client_id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of the client",
            "readOnly": true,
            "example": 3213
          },
          "company_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the company that the client belongs to",
            "readOnly": true,
            "example": 24232
          },
          "employee_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the employee that the client is associated with",
            "readOnly": true,
            "example": 5323
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the client"
          },
          "name": {
            "type": "string",
            "description": "The full name of the client",
            "example": "Test Client"
          },
          "phone": {
            "type": "string",
            "description": "Client's phone number",
            "example": "3445323523"
          },
          "last_app_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of the last appointment made by the client",
            "readOnly": true
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the record was created.",
            "readOnly": true
          },
          "notes": {
            "type": "string"
          },
          "preferences": {
            "type": "string"
          },
          "address": {
            "type": "string",
            "description": "Client's address",
            "example": "City country"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "nullable": true,
            "enum": [
              "m",
              "f"
            ],
            "description": "The gender of the client"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "Only the day and month are relevant"
          },
          "cient_since": {
            "type": "string",
            "format": "date",
            "description": "The date the client first scheduled an appointment or was created. This field is editable.\n"
          },
          "accept_emails": {
            "type": "boolean",
            "description": "Whether or not the client accepts email marketing"
          },
          "photo": {
            "type": "string",
            "description": "The base name of the photo file. If not null or empty, it can be used to get the client photo:\n- `small`:  65x65 (cropped to aspect ratio)  https://www.setster.com/admin/images/clients/s_[photo]\n- `medium`:  100x100 (cropped to aspect ratio)  https://www.setster.com/admin/images/clients/m_[photo]\n- `large`:  300x300 (not cropped)  https://www.setster.com/admin/images/clients/l_[photo]\n"
          }
        }
      },
      "Holiday": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of the holiday",
            "readOnly": true,
            "example": 13425
          },
          "company_id": {
            "type": "integer",
            "format": "int64",
            "example": 24232
          },
          "name": {
            "type": "string",
            "example": "Christmas"
          },
          "type": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "The type of the holiday:\n* `1` - holidays that have variable dates. Example: Thanksgiving, which is celebrated in U.S. on the fourth Thursday in November\n* `2` - holidays with fixed dates. Example: Christmas\n"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2018-12-25 00:00:00",
            "description": "The date and time when the holiday starts. It can be used in the request for creating or updating holidays only for holidays with `type = 2`. For holidays with `type = 1`, the start date is calculated based on the values of `day_in_week`, `month` and `day_order`"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2018-12-26 23:59:59",
            "description": "The date and time when the holiday ends. It can be used in the request for creating or updating holidays only for holidays with `type = 2`. For holidays with `type = 1`, the start date is calculated based on the values of `day_in_week`, `month` and `day_order`"
          },
          "day_in_week": {
            "type": "integer",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "description": "The number of weekday. Only for holidays with `type = 1`.\n* `0` - Monday\n* `1` - Tuesday\n* ...\n* `6` - Sunday\n"
          },
          "month": {
            "type": "integer",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "description": "The number of weekday. Only for holidays with `type = 1`\n* `0` - January\n* `1` - February\n* ...\n* `11` - December\n"
          },
          "day_order": {
            "type": "integer",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "description": "The order number of the weekday selected by `week_in_day` in the month selected by `month`. Only for holidays with `type = 1`\n* `0` - First\n* `1` - Second\n* `2` - Third\n* `3` - Fourth\n* `4` - Last\n"
          },
          "year": {
            "type": "integer",
            "readOnly": true,
            "description": "The current year. Only for holidays with `type = 1`"
          },
          "caption": {
            "type": "string",
            "readOnly": true,
            "example": "Dec 25th 2018 (Christmas)"
          },
          "enabled": {
            "type": "number",
            "enum": [
              0,
              1
            ],
            "default": 1
          },
          "timestamp": {
            "type": "number",
            "description": "The timestamp of the holiday's start date in the current year",
            "example": 1542844800
          }
        }
      },
      "AvailabilityDetails": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "integer",
            "format": "int32",
            "description": "The length (in minutes) of the appointment",
            "example": 60
          },
          "boxInterval": {
            "type": "integer",
            "format": "int32",
            "description": "Relevant only if return=boxes and represents the number of minutes in one box",
            "example": 5
          },
          "padding": {
            "type": "integer",
            "format": "int32",
            "description": "Relevant only if return=boxes and represents the number of minutes between two adjacent appointments",
            "example": 0
          },
          "day": {
            "type": "integer",
            "format": "int32",
            "description": "Selected day",
            "example": 15
          },
          "month": {
            "type": "integer",
            "format": "int32",
            "description": "Selected month",
            "example": 8
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "description": "Selected year",
            "example": 2012
          },
          "times": {
            "type": "array",
            "description": "Hash table of the start times of the available appointment slots, grouped by date",
            "items": {
              "type": "string",
              "example": "09:00:00"
            }
          }
        }
      },
      "Time": {
        "type": "object",
        "required": [
          "hour",
          "min",
          "am"
        ],
        "properties": {
          "hour": {
            "type": "integer",
            "example": 9
          },
          "min": {
            "type": "integer",
            "example": 0
          },
          "am": {
            "type": "string",
            "enum": [
              "am",
              "pm"
            ],
            "example": "am"
          }
        }
      },
      "TimeZone": {
        "type": "object",
        "properties": {
          "gmt": {
            "type": "integer",
            "format": "int32",
            "description": "Offset value in seconds",
            "example": -240
          },
          "caption": {
            "type": "string",
            "description": "Description",
            "example": "GMT -04:00 US/Canada/Eastern, Colombia, Peru (EDT)"
          },
          "dbName": {
            "type": "string",
            "description": "Mysql standard name",
            "example": "US/Eastern"
          },
          "short": {
            "type": "string",
            "description": "Short description",
            "example": "GMT -04:00"
          },
          "friendly": {
            "type": "string",
            "description": "Short/friendly description",
            "example": "GMT-04:00"
          }
        }
      },
      "WriteWebHook": {
        "type": "object",
        "required": [
          "target_url"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the company",
            "example": 24232
          },
          "target_url": {
            "type": "string",
            "format": "uri",
            "default": ""
          },
          "events": {
            "type": "array",
            "description": "The list of events. The currently supported events are:\n\n  1. `appointment.created`\n  2. `appointment.updated`\n  3. `appointment.deleted`\n  4. `appointment.rescheduled`\n  5. `appointment.reminder`\n  6. `appointment.canceled`\n  7. `*`\n\n  The \"`*`\" event means that you will subscribe to all currently supported\n  events as well as future added events.\n",
            "example": [
              "appointment.created",
              {
                "event": "appointment.rescheduled",
                "active": 0
              }
            ],
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "example": "appointment.created",
                  "enum": [
                    "appointment.created",
                    "appointment.updated",
                    "appointment.deleted",
                    "appointment.rescheduled",
                    "appointment.reminder",
                    "appointment.canceled",
                    "*"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "event": {
                      "type": "string",
                      "example": "appointment.created",
                      "enum": [
                        "appointment.created",
                        "appointment.updated",
                        "appointment.deleted",
                        "appointment.rescheduled",
                        "appointment.reminder",
                        "appointment.canceled",
                        "*"
                      ]
                    },
                    "active": {
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ],
                      "default": 1
                    }
                  }
                }
              ]
            }
          },
          "active": {
            "type": "integer",
            "enum": [
              0,
              1
            ],
            "default": 1
          }
        }
      },
      "ReadWebHook": {
        "type": "object",
        "required": [
          "target_url"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of the webHook subscriber",
            "readOnly": true,
            "example": 13425
          },
          "company_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the company",
            "example": 24232
          },
          "target_url": {
            "type": "string",
            "format": "uri",
            "default": ""
          },
          "events": {
            "type": "array",
            "readOnly": true,
            "description": "The list of events",
            "items": {
              "$ref": "#/components/schemas/WebHookEvent"
            }
          },
          "active": {
            "type": "integer",
            "enum": [
              0,
              1
            ],
            "default": 1
          },
          "verification_key": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "WebHookEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of the webHook event",
            "readOnly": true,
            "example": 13425
          },
          "event": {
            "type": "string",
            "example": "appointment.created",
            "enum": [
              "appointment.created",
              "appointment.updated",
              "appointment.deleted",
              "appointment.rescheduled",
              "appointment.reminder",
              "appointment.canceled",
              "*"
            ]
          },
          "active": {
            "type": "integer",
            "enum": [
              0,
              1
            ],
            "default": 1
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "ResponseStatus": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "description": "Status of the operation",
            "example": 0,
            "enum": [{
              "OK": 0,
              "INVALID_PARAMETERS": 1,
              "INVALID_CREDENTIALS": 2,
              "ACCOUNT_NOT_ACTIVE": 3,
              "INTERNAL_ERROR": 4,
              "ERROR_SAVING_ENTITY": 5,
              "ERROR_DELETING": 6,
              "NOT_FOUND": 7,
              "NOT_ALLOWED": 8,
              "SLOT_NOT_AVAILABLE": 9,
              "SLOT_OCCUPIED": 10,
              "ACCOUNTS_LIMIT_REACHED": 11
            }]
          },
          "statusDescriptions": {
            "type": "string",
            "example": "OK",
            "description": "Description of the status"
          }
        }
      },
      "UploadedFile": {
        "type": "object",
        "properties": {
          "upload_id": {
            "type": "integer",
            "format": "int64",
            "example": 32412
          },
          "file_name": {
            "type": "string",
            "example": "avatar.png"
          },
          "file_location": {
            "type": "string",
            "example": "/admin/images/clients/"
          }
        }
      },
      "TilesSteps": {
        "title": "TilesSteps",
        "type": "object",
        "required": ["type", "tiles"],
        "properties": {
          "stepTitle": {
            "title": "Title",
            "description": "The title of the step",
            "type": "string",
            "example": "First step"
          },
          "stepDescription": {
            "title": "Description",
            "description": "The description of the step",
            "type": "string",
            "example": "This is the first step"
          },
          "stepType": {
            "title": "Type",
            "description": "The step type",
            "type": "string",
            "enum": ["tiles"]
          },
          "key": {
            "title": "Key",
            "description": "The key used to store the selected value from this step",
            "type": "string",
            "example": "step_key"
          },
          "nextStep": {
            "title": "Next step",
            "description": "The next step the widget will go to after the user finishes with the current step",
            "type": "integer",
            "example": 1
          },
          "canSkip": {
            "title": "Can skip step",
            "description": "Option to set this step as being skippable or not. If you set this to true, you need to have the nextStep property defined in the step and not in the tile",
            "type": "boolean"
          },
          "label": {
            "title": "Step value label",
            "description": "The label used to show the value selected in the step. This will be used in the summary screen",
            "type": "string",
            "example": "Tiles step selected value"
          },
          "tiles": {
            "title": "Tiles",
            "description": "Here you can define the different tiles of the step",
            "type": "array",
            "items": {
              "title": "Tile definition",
              "description": "Tile definition",
              "type": "object",
              "properties": {
                "tileTitle": {
                  "title": "Tile title",
                  "description": "Here you can set the tile title",
                  "type": "string",
                  "example": "First tile"
                },
                "tileDescription": {
                  "title": "Tile description",
                  "description": "Here you can set the tile description",
                  "type": "string",
                  "example": "The description of the first tile"
                },
                "img": {
                  "title": "Tile image",
                  "description": "A link to a image that will be displayed for the tile",
                  "type": "string",
                  "format": "uri",
                  "example": "https://www.site.com/images/image.jpg"
                },
                "value": {
                  "title": "Tile value",
                  "description": "This is the value we will store and send along with the appointment when the user selects this particular tile",
                  "type": "string",
                  "example": "some value"
                },
                "nextStep": {
                  "title": "Tile next step",
                  "description": "The next the widget will go to if the user selects this tile",
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        }        
      },
      "ImageMap": {
          "$ref": "./schemas/steps/image-map.json"
      }
    }
  }
}